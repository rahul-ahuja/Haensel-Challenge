import numpy as np
import sys
from helper import read_data, plot_labels, normalize, one_hot_encoding
from imblearn.over_sampling import SMOTE
import warnings

# this is to avoid the display of any warning messages like for deprecated python functions.
if not sys.warnoptions:
    warnings.simplefilter("ignore")



#pd.set_option('display.max_columns', None) # displays full table columns
#pd.set_option('display.max_rows', None) # displays full table columns

#read the data file entered in the terminal
data = read_data(sys.argv[1])
print("Print Display of Sample data\n\n", data.head())

print("\n\nPrint Description of Sample data\n\n", data.describe())

#extracting the feature columns
features = data.loc[:, 0:len(data.columns)-2]

#extracting the categorical columns
cat_features = features.loc[:, features.max(axis=0)==1]

print("\n\nBoolean representation of the categorical columns to see if these are duplicated or not\n\n",
      cat_features.columns.duplicated())

#columns which are not used in the training because they are all zeroes.
fields_to_drop = features.loc[:, features.std(axis=0)==0].columns.values

print("\n\nFeature columns which were all zeroes and so not used in the model\n\n",
      fields_to_drop)

#continuous valued columns which are normalized
continuous_data = features[[3, 43, 64, 294]]
normalized_data = normalize(continuous_data)

#binning the outliers
col4 = one_hot_encoding([x if x < 3 else 3 for x in features[4]])
col23 = one_hot_encoding([0 if x == -1 else 1 for x in features[23]])
col36 = one_hot_encoding([0 if x < 0 else 4 if x > 3 else x for x in features[36]])

#combining all the processed columns
processed_data = np.concatenate((col4, col23, col36, normalized_data, cat_features), axis=1).astype('float32')

#extracting labels and plotting them
labels = data[[len(data.columns)-1]] #extracting the labels.
plot_labels(labels)

#Calling SMOTE Class
sm = SMOTE(n_jobs=-1)

#over-sampling by SMOTE and plotting the class labels generated by SMOTE
X_resampled, y_resampled = sm.fit_sample(processed_data, (np.array(labels).ravel()))

plot_labels(y_resampled)

print("The shape of the feature matrix after applying smote is {}".format(X_resampled.shape))
